---
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>‚≠ê Juevo de la Vida</title>
	</head>
	<body>
		<header>
			<h1>Juego de la Vida</h1>
		</header>
		<section>
			<button class="btn start">Play</button>
			<button class="btn reboot">Reboot</button>
		</section>
		<canvas>
		</canvas>

	</body>
</html>

<style>
	body {
		font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
		display: flex;
		gap: 1rem;
		flex-direction: column;
		align-items: center;
		background: linear-gradient(45deg, rgba(2,0,36,1) 0%, rgba(9,9,121,1) 35%, rgba(158, 0, 158, 0.781) 100%);
		background-repeat: no-repeat;
		color: #fff;
		font-size: 1.5rem;
		margin: 0;
		height: 100vh;
	}
	.btn {
		padding: 10px;
		border: none;
		border-radius: 5px;
		background-color: #1a0670;
		color: #fff;
		font-size: 1.5rem;
		cursor: pointer;
	}
</style>

<script>

	const startBtn = document.querySelector('.start')
	const rebootBtn = document.querySelector('.reboot')
	let intertalId = null

	const canvas = document.querySelector('canvas')
	const ctx = canvas.getContext('2d')
	const resolution = 20
	canvas.width = 600
	canvas.height =600

	const COLS = canvas.width / resolution
	const ROWS = canvas.height / resolution

	canvas.onmousedown = function(e) {
		const x = e.offsetX
		const y = e.offsetY
		const col = Math.floor(x / resolution)
		const row = Math.floor(y / resolution)
		grid[col][row] = grid[col][row] ? 0 : 1
		render(grid)
	}

	startBtn.addEventListener('click', () => {
		play()
	})

	rebootBtn.addEventListener('click', () => {
		roboot()
	})

	function buildGrid() {
		return new Array(COLS).fill(null)
			.map(() => new Array(ROWS).fill(null)
				.map(() => null))
	}

	function render(grid) {
		for (let col = 0; col < grid.length; col++) {
			for (let row = 0; row < grid[col].length; row++) {
				let cell = grid[col][row]
				ctx.beginPath()
				ctx.rect(col * resolution, row * resolution, resolution, resolution)
				ctx.fillStyle = cell ? 'black' : 'white'
				ctx.fill()
				ctx.stroke()
				// make cell clickable
			}
		}
	}

	function nextGen(grid) {
		const nextGen = grid.map(arr => [...arr])
		for (let col = 0; col < grid.length; col++) {
			for (let row = 0; row < grid[col].length; row++) {
				const cell = grid[col][row]
				let numNeighbours = 0
				for (let i = -1; i < 2; i++) {
					for (let j = -1; j < 2; j++) {
						if (i === 0 && j === 0) {
							continue
						}
						const x_cell = col + i
						const y_cell = row + j

						if (x_cell >= 0 && y_cell >= 0 && x_cell < COLS && y_cell < ROWS) {
							const currentNeighbour = grid[col + i][row + j]
							numNeighbours += currentNeighbour
						}
					}
				}

				if (cell === 1 && numNeighbours < 2) {
					nextGen[col][row] = 0
				} else if (cell === 1 && numNeighbours > 3) {
					nextGen[col][row] = 0
				} else if (cell === 0 && numNeighbours === 3) {
					nextGen[col][row] = 1
				}
			}
		}
		return nextGen
	}

	function play() {
		intertalId = setInterval(() => {
			grid = nextGen(grid)
			render(grid)
		}, 200);
	}

	function roboot() {
		clearInterval(intertalId)
		grid = buildGrid()
		render(grid)	
	}

	let grid = buildGrid()
	render(grid)

</script>